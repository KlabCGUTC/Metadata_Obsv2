#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para CACD Metadata Analyzer
Cria um vault de exemplo e testa as funcionalidades principais
"""

import os
import sys
import tempfile
import shutil
import yaml
from pathlib import Path

def create_test_vault(base_path: Path):
    """Cria um vault de teste com notas de exemplo"""
    base_path.mkdir(parents=True, exist_ok=True)
    
    # Criar taxonomia de teste simplificada
    test_taxonomy = {
        "Hist√≥ria do Brasil": {
            "O per√≠odo colonial": ["A configura√ß√£o territorial", "As dimens√µes econ√¥micas"],
            "O Segundo Reinado (1840-1889)": ["Pol√≠tica externa", "A quest√£o da escravid√£o"]
        },
        "Hist√≥ria Mundial": {
            "Revolu√ß√µes": ["A Revolu√ß√£o Francesa", "Revolu√ß√µes no s√©culo XX"],
            "As rela√ß√µes internacionais": ["O Concerto Europeu", "A Guerra Fria"]
        },
        "Pol√≠tica Internacional": {
            "O Brasil e a Am√©rica do Sul": ["Integra√ß√£o na Am√©rica do Sul", "O MERCOSUL"],
            "Estados Unidos da Am√©rica": []
        },
        "Geografia": {
            "Geografia pol√≠tica": ["Teorias geopol√≠ticas", "Rela√ß√µes Estado e territ√≥rio"],
            "Geografia Urbana": ["Processo de urbaniza√ß√£o", "Metropoliza√ß√£o"]
        },
        "ECONOMIA": {
            "Microeconomia": ["Demanda do Consumidor", "Oferta do Produtor"],
            "Macroeconomia": ["Contabilidade Nacional", "Pol√≠tica monet√°ria"]
        }
    }
    
    with open(base_path / "taxonomia_cacd.yaml", 'w', encoding='utf-8') as f:
        yaml.dump(test_taxonomy, f, default_flow_style=False, allow_unicode=True)
    
    # Criar notas de teste
    test_notes = [
        {
            "filename": "revolucao-francesa.md",
            "frontmatter": {"title": "A Revolu√ß√£o Francesa"},
            "content": """
A Revolu√ß√£o Francesa (1789-1799) foi um per√≠odo de intensa transforma√ß√£o pol√≠tica e social na Fran√ßa. 
Marcou o fim do Antigo Regime e estabeleceu princ√≠pios democr√°ticos que influenciaram o mundo todo.

## Causas
- Crise financeira do Estado
- Desigualdades sociais
- Influ√™ncia do Iluminismo

## Fases
1. **Fase Moderada** (1789-1792)
2. **Fase Radical** (1792-1794) 
3. **Fase Termidoriana** (1794-1799)

## Impacto
A revolu√ß√£o inspirou movimentos liberais em toda a Europa e nas Am√©ricas.
"""
        },
        {
            "filename": "guerra-do-paraguai.md",
            "frontmatter": {
                "title": "Guerra do Paraguai",
                "area": "Hist√≥ria do Brasil",
                "relevancia_cacd": 5
            },
            "content": """
A Guerra do Paraguai (1864-1870) foi o maior conflito da Am√©rica do Sul.

## Causas
- Quest√µes geopol√≠ticas na regi√£o
- Pol√≠tica expansionista de Solano L√≥pez
- Interesses econ√¥micos no Rio da Prata

## Participantes
- **Tr√≠plice Alian√ßa**: Brasil, Argentina, Uruguai
- **Paraguai**: sob comando de Francisco Solano L√≥pez

## Consequ√™ncias para o Brasil
- Fortalecimento do Ex√©rcito brasileiro
- Aumento do prest√≠gio internacional
- Impacto na quest√£o abolicionista
"""
        },
        {
            "filename": "mercosul-origem.md",
            "frontmatter": {"title": "Origens do MERCOSUL"},
            "content": """
O Mercado Comum do Sul (MERCOSUL) teve origem nos acordos bilaterais entre Brasil e Argentina.

## Antecedentes
- Processo de redemocratiza√ß√£o nos anos 1980
- Necessidade de integra√ß√£o econ√¥mica
- Supera√ß√£o das rivalidades hist√≥ricas

## Tratado de Assun√ß√£o (1991)
Estabeleceu as bases do MERCOSUL com quatro pa√≠ses fundadores:
- Brasil
- Argentina  
- Uruguai
- Paraguai

## Objetivos
- Livre circula√ß√£o de bens e servi√ßos
- Tarifa externa comum
- Coordena√ß√£o de pol√≠ticas macroecon√¥micas
"""
        },
        {
            "filename": "urbanizacao-brasil.md",
            "frontmatter": {},
            "content": """
A urbaniza√ß√£o no Brasil acelerou-se principalmente ap√≥s 1950.

## Caracter√≠sticas
- Migra√ß√£o rural-urbana
- Concentra√ß√£o em metr√≥poles
- Forma√ß√£o de periferias

## Regi√µes Metropolitanas
As principais regi√µes metropolitanas incluem S√£o Paulo, Rio de Janeiro, Belo Horizonte.

## Problemas Urbanos
- D√©ficit habitacional
- Transporte p√∫blico deficiente  
- Polui√ß√£o ambiental
- Viol√™ncia urbana

## Geografia Urbana
O processo de metropoliza√ß√£o criou complexas redes urbanas no territ√≥rio brasileiro.
"""
        },
        {
            "filename": "politica-monetaria.md",
            "frontmatter": {"title": "Pol√≠tica Monet√°ria no Brasil"},
            "content": """
A pol√≠tica monet√°ria √© conduzida pelo Banco Central do Brasil.

## Instrumentos
- Taxa b√°sica de juros (SELIC)
- Opera√ß√µes de mercado aberto
- Dep√≥sitos compuls√≥rios

## Objetivos
- Controle da infla√ß√£o
- Estabilidade do sistema financeiro
- Crescimento econ√¥mico sustent√°vel

## Regime de Metas de Infla√ß√£o
Adotado desde 1999, estabelece meta anual para o IPCA.

## Macroeconomia
A pol√≠tica monet√°ria interage com a pol√≠tica fiscal para determinar os resultados macroecon√¥micos.
"""
        }
    ]
    
    # Criar arquivos das notas
    for note in test_notes:
        content = ""
        if note["frontmatter"]:
            content += "---\n"
            content += yaml.dump(note["frontmatter"], default_flow_style=False, allow_unicode=True)
            content += "---\n"
        content += note["content"]
        
        with open(base_path / note["filename"], 'w', encoding='utf-8') as f:
            f.write(content)
    
    return base_path

def test_analyzer(vault_path: Path, taxonomy_path: Path):
    """Testa o analisador CACD"""
    print(f"üß™ Testando CACD Analyzer...")
    print(f"üìÅ Vault: {vault_path}")
    print(f"üìä Taxonomia: {taxonomy_path}")
    
    try:
        # Importa o m√≥dulo (assumindo que est√° no PATH ou diret√≥rio atual)
        import cacd_metadata_analyzer as analyzer
        
        # Inicializa o analisador
        cacd_analyzer = analyzer.CACDMetadataAnalyzer(
            str(vault_path), 
            str(taxonomy_path)
        )
        
        # Testa scan do vault
        num_notes = cacd_analyzer.scan_vault()
        print(f"‚úÖ {num_notes} notas carregadas")
        
        # Testa an√°lise de uma nota espec√≠fica
        if "urbanizacao-brasil.md" in cacd_analyzer.notes:
            note = cacd_analyzer.notes["urbanizacao-brasil.md"]
            suggestion = cacd_analyzer.analyze_note(note)
            
            print(f"üîç An√°lise da nota '{note.title}':")
            print(f"   - √Årea sugerida: {suggestion.area}")
            print(f"   - Sub√°rea: {suggestion.subarea}")
            print(f"   - Tags: {suggestion.tags}")
            print(f"   - Relev√¢ncia: {suggestion.relevancia_cacd}")
            print(f"   - Confian√ßa: {suggestion.confidence:.2f}")
        
        # Testa gera√ß√£o de feedback
        if cacd_analyzer.generate_feedback_file():
            feedback_file = vault_path / "cacd_feedback.md"
            print(f"‚úÖ Arquivo de feedback gerado: {feedback_file}")
            
            # Mostra preview do feedback
            with open(feedback_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()[:20]  # Primeiras 20 linhas
                print("üìÑ Preview do feedback:")
                for line in lines:
                    print(f"   {line.rstrip()}")
                if len(lines) == 20:
                    print("   ...")
        
        # Testa gera√ß√£o de relat√≥rio
        report_path = cacd_analyzer.generate_study_report()
        if report_path:
            print(f"‚úÖ Relat√≥rio gerado: {report_path}")
            
            # Mostra preview do relat√≥rio
            with open(report_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()[:15]
                print("üìä Preview do relat√≥rio:")
                for line in lines:
                    print(f"   {line.rstrip()}")
        
        print(f"\nüéâ Teste conclu√≠do com sucesso!")
        return True
        
    except ImportError:
        print("‚ùå Erro: M√≥dulo cacd_metadata_analyzer n√£o encontrado")
        print("   Certifique-se de que o arquivo est√° no diret√≥rio atual ou no PYTHONPATH")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        return False

def main():
    print("üéØ CACD Metadata Analyzer - Teste de Funcionalidade")
    print("=" * 55)
    
    # Verifica depend√™ncias b√°sicas
    try:
        import yaml
        print("‚úÖ PyYAML dispon√≠vel")
    except ImportError:
        print("‚ùå PyYAML n√£o encontrado. Instale com: pip install pyyaml")
        return 1
    
    # Cria vault tempor√°rio para teste
    with tempfile.TemporaryDirectory(prefix="cacd_test_") as temp_dir:
        temp_path = Path(temp_dir)
        vault_path = create_test_vault(temp_path / "test_vault")
        taxonomy_path = vault_path / "taxonomia_cacd.yaml"
        
        print(f"\nüìÅ Vault de teste criado em: {vault_path}")
        
        # Lista arquivos criados
        files = list(vault_path.glob("*.md")) + list(vault_path.glob("*.yaml"))
        print(f"üìÑ Arquivos criados: {len(files)}")
        for file in files:
            print(f"   - {file.name}")
        
        print("\n" + "=" * 55)
        
        # Executa teste
        if test_analyzer(vault_path, taxonomy_path):
            print(f"\n‚ú® Teste bem-sucedido! O programa est√° funcionando corretamente.")
            print(f"\nüìñ Para usar com seu vault real:")
            print(f"   cacd-analyzer /caminho/para/seu/vault -t taxonomia_cacd.yaml")
            return 0
        else:
            print(f"\n‚ùå Teste falhou. Verifique a instala√ß√£o.")
            return 1

if __name__ == "__main__":
    sys.exit(main())
